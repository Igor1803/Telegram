import os
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.client.default import DefaultBotProperties
from gtts import gTTS
from deep_translator import GoogleTranslator
from config import TOKEN
from aiogram.methods import SetMyCommands
from aiogram.types import BotCommand

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
os.makedirs("img", exist_ok=True)
os.makedirs("audio", exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def save_photo(message: Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    filename = f"img/{photo.file_id}.jpg"
    await bot.download_file(file.file_path, filename)
    await message.reply(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {filename}")


# üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /voice <—Ç–µ–∫—Å—Ç>
@dp.message(Command("voice"))
async def voice_command(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /voice <—Ç–µ–∫—Å—Ç>")

    text = parts[1].strip()
    if not text:
        return await message.reply("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    if len(text) > 500:
        return await message.reply("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)")

    filename = f"audio/{message.message_id}.mp3"

    async with ChatActionSender.record_voice(bot=bot, chat_id=message.chat.id):
        try:
            tts = gTTS(text=text, lang='ru')
            tts.save(filename)
            await message.reply_voice(types.FSInputFile(filename), caption="üîä –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        finally:
            if os.path.exists(filename):
                os.remove(filename)


# üåç –ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
@dp.message(F.text & ~F.text.startswith("/"))
async def translate_text(message: Message):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        try:
            translation = GoogleTranslator(source="ru", target="en").translate(message.text)
            await message.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n<code>{translation}</code>")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.")


# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
